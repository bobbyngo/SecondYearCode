type: theory
files:
- name: src/Main.java
  visible: true
  text: |
    public class Main {
       public static void main(String[] args) {
          MessagePost mp = new MessagePost("Chris Mascarolls", "Deck the halls.");

          for (int i = 0; i < 32; i++) {
             mp.react(0);
          }
          for (int i = 0; i < 13; i++) {
             mp.react(1);
          }
          mp.react(2);

          mp.addComment(new Comment("Wanda Nauwittol", "What are your plans?!"));
          mp.addComment(new Comment("Jude Alkingtomie", "Yay!"));
          mp.addComment(new Comment("Grinch Grinch", "Nope!"));

          VideoPost vp = new VideoPost("Grinch Grinch", "This bumps! https://www.youtube.com/watch?v=GAs67cRfmQI&ab_channel=Tyler%2CTheCreator-Topic", true);
          for (int i = 0; i < 13; i++) {
             vp.react(1);
          }
          vp.react(0);

          PollPost pp = new PollPost("Wanda Nauwittol", "What's everyone doing for Christmas Break!?");
          pp.react("Eat!");
          pp.react("Eat!");
          pp.react("Eat");
          pp.react("Celebrate");
          pp.react("Not study!");
          pp.react("Not study!");
          pp.react("Not study!");
          pp.react("Celebrate");

          for (int i = 0; i < 5; i++) {
             pp.react(0);
          }
          for (int i = 0; i < 3; i++) {
             pp.react(1);
          }
          pp.react(2);

          pp.addComment(new Comment("Jude Alkingtomie", "Yes."));
          pp.addComment(new Comment("Grinch Grinch", "Nothing... >:)"));

          PostWall pw = new PostWall();
          pw.addPost(mp);
          pw.addPost(vp);
          pw.addPost(pp);
          pw.generate();
       }
    }
  learner_created: false
- name: src/VideoPost.java
  visible: true
  text: |
    public class VideoPost extends Post {

        private final boolean viewerDiscretion;

        public VideoPost(String author, String content, boolean viewerDiscretion) {
            super(author, content);
            this.viewerDiscretion = viewerDiscretion;
        }

        @Override
        public void display() {
            if (viewerDiscretion) {
                System.out.println("-VIEWER DISCRETION ADVISED-");
            }
            super.display();
        }
    }
  learner_created: false
- name: src/Comment.java
  visible: true
  text: |
    import java.util.Calendar;

    public class Comment {

        private final String author;
        private final String content;
        private final String time = Calendar.getInstance().getTime().toString();

        public Comment(String author, String content) {
            this.author = author;
            this.content = content;
        }

        public String getDisplay() {
            return "'" + content + "' - " + author + " (" + time + ")";
        }
    }
  learner_created: false
- name: src/Post.java
  visible: true
  text: |
    import java.util.ArrayList;
    import java.util.Calendar;
    import java.util.List;

    public class Post {

        private final String author;
        private final String content;
        private final List<Comment> comments = new ArrayList<>();
        private final int[] reactions = new int[4];
        private final String time = Calendar.getInstance().getTime().toString();

        public Post(String author, String content) {
            this.author = author;
            this.content = content;
        }

        public void react(int r) {
            reactions[r]++;
        }

        public void addComment(Comment cp) {
            comments.add(cp);
        }

        public void display() {
            StringBuilder sb = new StringBuilder();
            for (Comment c : comments) {
                sb.append("-> ")
                        .append(c.getDisplay())
                        .append("\n");
            }

            String s = String.format(
                    "%s on (%s):\n" +
                    "'%s'\n" +
                    "\uD83D\uDE00(%d) \uD83D\uDE43(%d) \uD83D\uDE12(%d) \uD83D\uDE2F(%d)\n" +
                    "Comments:\n" +
                    "%s",
                    author, time, content, reactions[0], reactions[1], reactions[2], reactions[3], sb.toString()
            );
            System.out.println(s);
        }

        public void display(String customContent) {
            StringBuilder sb = new StringBuilder();
            for (Comment c : comments) {
                sb.append("-> ")
                        .append(c.getDisplay())
                        .append("\n");
            }

            String s = String.format(
                    "%s on (%s):\n" +
                    "'%s'\n" +
                    "%s" +
                    "\uD83D\uDE00(%d) \uD83D\uDE43(%d) \uD83D\uDE12(%d) \uD83D\uDE2F(%d)\n" +
                    "Comments:\n" +
                    "%s",
                    author, time, content, customContent,
                    reactions[0], reactions[1], reactions[2], reactions[3], sb.toString()
            );
            System.out.println(s);
        }

        public String getContent() {
            return content;
        }

        public String getAuthor() {
            return author;
        }

        public String getTime() {
            return time;
        }

    }
  learner_created: false
- name: src/PollPost.java
  visible: true
  text: |
    import java.util.ArrayList;
    import java.util.List;

    public class PollPost extends Post {

        private final List<StringIntPair> pollAnswers = new ArrayList<>();

        public PollPost(String author, String content) {
            super(author, content);
        }

        @Override
        public void display() {
            StringBuilder sb = new StringBuilder();
            for (StringIntPair pair : pollAnswers) {
                sb.append(pair.s).append(" (").append(pair.i).append(")\n");
            }
            super.display(sb.toString());
        }

        public void react(String s) {
            for (int i = 0; i < pollAnswers.size(); i++) {
                StringIntPair pair = pollAnswers.get(i);
                if (s.equals(pair.s)) {
                    pollAnswers.set(i, new StringIntPair(s, pair.i + 1));
                    return;
                }
            }
            pollAnswers.add(new StringIntPair(s, 1));
        }
    }
  learner_created: false
- name: src/StringIntPair.java
  visible: true
  text: |
    public class StringIntPair {
        public final String s;
        public final int i;

        public StringIntPair(String s, int i) {
            this.s = s;
            this.i = i;
        }
    }
  learner_created: false
- name: src/PostWall.java
  visible: true
  text: |
    import java.util.ArrayList;
    import java.util.List;

    public class PostWall {
        private final List<Post> wall = new ArrayList<>();


        public void generate() {
            StringBuilder sb = new StringBuilder();
            for (Post p : wall) {
                p.display();
                System.out.println("--------------------------------------------------");
            }
        }

        public void addPost(Post p) {
            wall.add(p);
        }
    }
  learner_created: false
- name: src/MessagePost.java
  visible: true
  text: |
    public class MessagePost extends Post {

        public MessagePost(String author, String content) {
            super(author, content);
        }
    }
  learner_created: false
status: Solved
feedback:
  time: Wed, 07 Apr 2021 12:52:48 UTC
record: -1
post_submission_on_open: true
